import math
import warnings
import pandas as pd
from scipy.stats import zscore
from sklearn.metrics import accuracy_score, precision_score, recall_score
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from scipy import stats as stat

warnings.filterwarnings('ignore')
df = pd.read_csv('wine.csv')
print(df.head())
print(df.info)

RSEED = 8123

# Q1
X = df.drop('Alcohol', axis=1)
y = df['Alcohol']
# Q2
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RSEED)
# Q3
k = int(math.sqrt(X_train.shape[0]) / 2)
if k % 2 == 0:
    k += 1

clf = KNeighborsClassifier(n_neighbors=k)
clf.fit(X_train, y_train)

# predict test
y_pred_test = clf.predict(X_test)
print("test set:")
print("Accuracy:", accuracy_score(y_test, y_pred_test))
print("Precision:", precision_score(y_test, y_pred_test, average=None))
print("recall:", recall_score(y_test, y_pred_test, average=None))
print("---------------------------------------")
# predict train

y_pres_train = clf.predict(X_train)
print("train set:")
print("Accuracy:", accuracy_score(y_train, y_pres_train))
print("Precision:", precision_score(y_train, y_pres_train, average=None))
# ValueError: average has to be one of (None, 'micro', 'macro', 'weighted', 'samples')
print("recall:", recall_score(y_train, y_pres_train, average=None))
print("---------------------------------------")

# Q4
acc_scores = []
for i in range(1, 20):
    knn = KNeighborsClassifier(n_neighbors=i)
    knn.fit(X_train, y_train)
    pred_i = knn.predict(X_test)
    acc_scores.append(accuracy_score(y_test, pred_i))

plt.figure(figsize=(12, 6))
plt.plot(range(1, 20), acc_scores, marker='o')
plt.show()

# the best K is 4.

# Q5
X = df.drop('Alcohol', axis=1).apply(zscore)
y = df['Alcohol']
X_train_z, X_test_z, y_train_z, y_test_z = train_test_split(X, y, test_size=0.2, random_state=RSEED)
clf2 = KNeighborsClassifier(n_neighbors=k)

clf2.fit(X_train_z, y_train_z)
# predict normalize test
y_pred_test_z = clf2.predict(X_test_z)
print("normalize test set:")
print("Accuracy:", accuracy_score(y_test_z, y_pred_test_z))
print("Precision:", precision_score(y_test_z, y_pred_test_z, average=None))
print("recall:", recall_score(y_test_z, y_pred_test_z, average=None))
print("---------------------------------------")

# predict normalize train
y_pres_train_z = clf2.predict(X_train_z)
print("normalize train set:")
print("Accuracy:", accuracy_score(y_train_z, y_pres_train_z))
print("Precision:", precision_score(y_train_z, y_pres_train_z, average=None))
print("recall:", recall_score(y_train_z, y_pres_train_z, average=None))
print("---------------------------------------")

# the not normalize is better option
